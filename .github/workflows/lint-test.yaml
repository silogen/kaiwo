# .github/workflows/lint-test-e2e.yml
name: lint-test-and-e2e

on:
  push:
    branches: [main, master]
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  TTL_TAG: 1h   # how long images live in ttl.sh (max 24h)

jobs:
  lint-go:
    name: Lint (Go)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: stable
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=10m

  lint-python:
    name: Lint (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'python/requirements-dev.txt'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: flake8
      run: flake8 kaiwo
    - name: black (check)
      run: black --check --diff kaiwo
    - name: isort (check)
      run: isort --check-only --diff kaiwo

  test:
    name: Unit tests
    needs: [lint-go, lint-python]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - name: Run tests
      run: |
        go mod tidy
        make test

  build-image:
    name: Build & push (ttl.sh)
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.vars.outputs.full_image }}
      repo: ${{ steps.vars.outputs.repo }}
      tag: ${{ steps.vars.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - name: Configure Docker build cache
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ github.ref_name }}-${{ github.sha }}
        restore-keys: |
          buildx-${{ github.ref_name }}-
          buildx-

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Compute ttl.sh image ref
      id: vars
      shell: bash
      run: |
        ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
        REPO="ttl.sh/${ID}"
        TAG="${{ env.TTL_TAG }}"
        echo "repo=${REPO}"              >> "$GITHUB_OUTPUT"
        echo "tag=${TAG}"                >> "$GITHUB_OUTPUT"
        echo "full_image=${REPO}:${TAG}" >> "$GITHUB_OUTPUT"

    - name: Build & push to ttl.sh
      env:
        DOCKER_BUILDKIT: '1'
      run: |
        TTL=${{ env.TTL_TAG }} IMAGE_NAME=${{ steps.vars.outputs.full_image }} \
        bash ./kaiwo.sh --build --push=ttl.sh
      # If your kaiwo.sh uses docker build, wire cache hints there (cache-from/to type=local or gha)

    - name: Build CLI binary
      run: |
        make build-cli
        make build-log
        mkdir -p builds
        cp bin/kaiwo builds/

    - name: Upload CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: kaiwo-builds
        path: builds
        if-no-files-found: error
        retention-days: 5

  seed-images:
    name: Seed images (artifact)
    runs-on: ubuntu-latest
    steps:
    - name: Pre-pull useful images
      run: |
        set -euxo pipefail
        docker pull docker.io/library/busybox:stable
        # Match your kind/k8s pause image as needed
        docker pull registry.k8s.io/pause:3.10
        # Add any images your tests frequently need:
        # docker pull ghcr.io/yourorg/your-test-helper:tag
        docker save -o /tmp/images.tar \
          docker.io/library/busybox:stable \
          registry.k8s.io/pause:3.10
    - uses: actions/upload-artifact@v4
      with:
        name: kind-image-seed
        path: /tmp/images.tar
        retention-days: 7

  e2e-kind:
    name: E2E on kind (${{ matrix.installer }}, shard ${{ matrix.shard }}/${{ matrix.total }})
    needs: [build-image, seed-images]  
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        installer: [kustomization, helm]
    steps:
    - uses: actions/checkout@v4

    - name: Free a bit of disk
      run: |
        sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc || true
        sudo apt-get clean
        docker system prune -af || true
        df -h

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Download CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: kaiwo-builds
        path: builds

    - name: Make CLI executable
      run: |
        chmod +x builds/kaiwo
        chmod +x builds/log
        ls -l builds

    - name: Install Chainsaw
      uses: kyverno/action-install-chainsaw@v0.2.12
      with:
        release: v0.2.12

    - name: Install kind (CLI)
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        kind version

    - name: Install Helmfile
      run: |
        curl -Lo helmfile.tar.gz https://github.com/helmfile/helmfile/releases/download/v1.1.5/helmfile_1.1.5_linux_amd64.tar.gz
        tar -xzf helmfile.tar.gz
        chmod +x ./helmfile
        sudo mv ./helmfile /usr/local/bin/helmfile
        rm helmfile.tar.gz
        helmfile version

    - name: Start pull-through caches
      run: |
        docker network create kind || true
        docker run -d --name proxy-docker-hub --restart=always \
          --net=kind -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io registry:2
        docker run -d --name proxy-k8s --restart=always \
          --net=kind -e REGISTRY_PROXY_REMOTEURL=https://registry.k8s.io registry:2
        docker run -d --name proxy-ghcr --restart=always \
          --net=kind -e REGISTRY_PROXY_REMOTEURL=https://ghcr.io registry:2

    - name: Create kind cluster (wired to caches)
      run: |
        cat > kind.yaml <<'EOF'
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        networking:
          kubeProxyMode: nftables
        nodes:
        - role: control-plane
        - role: worker
        - role: worker
        - role: worker
        - role: worker
        - role: worker
        containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
              endpoint = ["http://proxy-docker-hub:5000"]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."ghcr.io"]
              endpoint = ["http://proxy-ghcr:5000"]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.k8s.io"]
              endpoint = ["http://proxy-k8s:5000"]
        EOF
        kind create cluster --name ci --config kind.yaml --wait 180s

    - name: Load seeded images into kind
      uses: actions/download-artifact@v4
      with:
        name: kind-image-seed
        path: .
    - name: kind load image-archive
      run: |
        kind load image-archive images.tar --name ci || true

    - name: Additional cluster setup
      run: bash ./test/scripts/setup_kind.sh --skip-static

    - name: Install CRDs and Deploy (${{ matrix.installer }})
      env:
        IMAGE_NAME: ${{ needs.build-image.outputs.image }}
      run: |
        bash ./kaiwo.sh --install-crds --deploy-via=${{ matrix.installer }} up

    - name: Wait for rollout
      run: |
        kubectl -n kaiwo-system rollout status deployment/kaiwo-controller-manager --timeout=300s
        kubectl -n kube-system rollout status deployment/kaiwo-scheduler --timeout=300s
        kubectl -n kaiwo-system get pods -o wide

    - name: Run E2E tests
      run: |
        cd test
        make test-kind

    - name: Disk usage report (post-mortem)
      if: always()
      run: |-
        df -h
        sudo du -xh /var/lib/docker | sort -rh | head -n 20
        sudo du -xh /home/runner/work | sort -rh | head -n 20
