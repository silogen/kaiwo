name: publish-main

on:
  push:
    branches: [main, master, fix-helm-publish]
    # paths:
    #   - 'apis/**'
    #   - 'internal/**'
    #   - 'pkg/**'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/kaiwo-operator
      CHART_NAME: kaiwo-operator

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Helm
      uses: azure/setup-helm@v4.3.1

    - name: Derive versions (image + chart)
      id: ver
      shell: bash
      run: |
        SHORT_SHA="${GITHUB_SHA::7}"
        IMAGE_TAG="main-${SHORT_SHA}"
        CHART_VERSION="0.0.0-main.${SHORT_SHA}"
        {
          echo "SHORT_SHA=${SHORT_SHA}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          echo "CHART_VERSION=${CHART_VERSION}"
        } >> "$GITHUB_ENV"
        {
          echo "short_sha=${SHORT_SHA}"
          echo "image_tag=${IMAGE_TAG}"
          echo "chart_version=${CHART_VERSION}"
        } >> "$GITHUB_OUTPUT"

    - name: Log in to GHCR (docker)
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

    - name: Build and push operator image
      run: |
        make docker-build IMG=${IMAGE_REPO}:${IMAGE_TAG}
        make docker-push  IMG=${IMAGE_REPO}:${IMAGE_TAG}
        docker tag ${IMAGE_REPO}:${IMAGE_TAG} ${IMAGE_REPO}:main
        docker push ${IMAGE_REPO}:main

    - name: Generate install.yaml
      run: |
        make build-installer TAG=${IMAGE_TAG}
        cp dist/install.yaml install.yaml

    - name: Package Helm chart
      run: |
        make helm-release TAG=${IMAGE_TAG} CHART_VERSION=${CHART_VERSION}

    - name: Log in to GHCR (Helm/OCI)
      run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u $GITHUB_ACTOR --password-stdin

    - name: Push Helm chart to OCI registry
      run: |
        make helm-push-oci TAG=${IMAGE_TAG} CHART_VERSION=${CHART_VERSION}

    - name: Prepare local 'latest' chart dir in repo
      shell: bash
      run: |
        set -euo pipefail
        LOCAL_DIR="chart/local/latest-main"
        mkdir -p "${LOCAL_DIR}"
        git rm -rf --quiet "${LOCAL_DIR}"/* 2>/dev/null || true
        mkdir -p "${LOCAL_DIR}"
        CHART_TGZ="dist/${CHART_NAME}-${CHART_VERSION}.tgz"
        test -f "${CHART_TGZ}" || { echo "Chart not found: ${CHART_TGZ}"; ls -l dist || true; exit 1; }
        cp "${CHART_TGZ}" "${LOCAL_DIR}/${CHART_NAME}.tgz"

    - name: Commit local chart files via Contents API (Verified)
      shell: bash
      env:
        GH_REPO: ${{ github.repository }}
        GH_BRANCH: ${{ github.ref_name }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CHART_NAME: ${{ env.CHART_NAME }}
        CHART_VERSION: ${{ env.CHART_VERSION }}
      run: |
        set -euo pipefail

        get_sha() {
          local dst="$1"
          local tmp; tmp="$(mktemp)"
          local code
          code="$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                        -H "Accept: application/vnd.github+json" \
                        -o "$tmp" -w '%{http_code}' \
                        "https://api.github.com/repos/${GH_REPO}/contents/${dst}?ref=${GH_BRANCH}")"
          if [ "$code" = "200" ]; then
            jq -r '.sha // empty' < "$tmp"
          else
            echo ""
          fi
          rm -f "$tmp"
        }

        put_file() {
          local dst="$1" payload="$2"
          local http
          http="$(curl -sS -o /tmp/resp.json -w '%{http_code}' \
            -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            --data-binary @"$payload" \
            "https://api.github.com/repos/${GH_REPO}/contents/${dst}" || true)"
          echo "$http"
        }

        commit_file () {
          local SRC="$1" DST="$2" MSG="$3"

          # get file sha if it exists
          local SHA; SHA="$(get_sha "$DST")"
          local CONTENT_B64; CONTENT_B64="$(base64 -w0 < "${SRC}")"

          local payload; payload="$(mktemp)"
          cat >"$payload" <<EOF
        {
          "message": "${MSG}",
          "content": "${CONTENT_B64}",
          "branch": "${GH_BRANCH}",
          "committer": {
            "name": "github-actions[bot]",
            "email": "41898282+github-actions[bot]@users.noreply.github.com"
          },
          "author": {
            "name": "github-actions[bot]",
            "email": "41898282+github-actions[bot]@users.noreply.github.com"
          }$( [ -n "${SHA}" ] && printf ', "sha": "%s"' "${SHA}" )
        }
        EOF

          # try once
          http="$(put_file "$DST" "$payload")"
          if [ "$http" = "409" ]; then
            # branch advanced / file updated between calls: re-fetch SHA and retry once
            SHA="$(get_sha "$DST")"
            if [ -n "$SHA" ]; then
              jq --arg sha "$SHA" '. + {sha: $sha}' "$payload" > "${payload}.2"
              mv "${payload}.2" "$payload"
            fi
            http="$(put_file "$DST" "$payload")"
          fi

          if [ "$http" != "200" ] && [ "$http" != "201" ]; then
            echo "GitHub API error ($http) while uploading $DST:" >&2
            cat /tmp/resp.json >&2 || true
            exit 22
          fi
          rm -f "$payload" /tmp/resp.json || true
        }

        # files to publish
        TGZ_SRC="dist/${CHART_NAME}-${CHART_VERSION}.tgz"
        TGZ_DST="chart/local/latest-main/${CHART_NAME}.tgz"
        VER_SRC="dist/version.txt"
        VER_DST="chart/local/latest-main/version.txt"
        README_SRC="chart/local/latest-main/README.md"
        README_DST="chart/local/latest-main/README.md"

        test -f "${TGZ_SRC}" || { echo "Missing ${TGZ_SRC}"; exit 1; }
        [ -f "${VER_SRC}" ] || echo "${CHART_VERSION}" > "${VER_SRC}"
        [ -f "${README_SRC}" ] || echo "Local chart version ${CHART_VERSION} based on main branch. This is not intended for production use. Do not confuse this with official releases." > "${README_SRC}"

        MSG="Update local Helm chart to ${CHART_VERSION}"
        commit_file "${TGZ_SRC}"    "${TGZ_DST}"    "${MSG}"
        commit_file "${VER_SRC}"    "${VER_DST}"    "${MSG}"
        commit_file "${README_SRC}" "${README_DST}" "${MSG}"



