apiVersion: ray.io/v1
kind: RayService
metadata:
  name: {{ .Meta.Name }}
  namespace: {{ .Meta.Namespace }}
  labels:
    kaiwo-cli/username: {{ .Meta.User }}
spec:
  serveConfigV2: | 
{{ .Workload.Serveconfig | indent 4 }}
  rayClusterConfig:
    enableInTreeAutoscaling: true
    headGroupSpec:
      rayStartParams:
        dashboard-host: "0.0.0.0"
      template:
        spec:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          {{- if .Meta.ImagePullSecret }}
          imagePullSecrets:
          - name: {{ .Meta.ImagePullSecret }}
          {{- end }}
          containers:
            - name: ray-head
              image: {{ .Meta.Image }}
              imagePullPolicy: Always
              env:
                - name: HF_HOME
                  value: /workload/.cache/huggingface
              {{- if .Meta.EnvVars }}
              {{- range .Meta.EnvVars }}
              {{- if .Value }}
                - name: {{ .Name }}
                  value: "{{ .Value }}"
              {{- else }}
                - name: {{ .Name }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .ValueFrom.SecretKeyRef.Name }}
                      key: {{ .ValueFrom.SecretKeyRef.Key }}
              {{- end }}
              {{- end }}
              {{- end }}
              resources:
                limits:
                  cpu: "2"
                  memory: "16Gi"
                requests:
                  cpu: "2"
                  memory: "16Gi"
              volumeMounts:
                - mountPath: /workload
                  name: {{ .Meta.Name }}-main
              {{- if .Meta.SecretVolumes }}
              {{- range .Meta.SecretVolumes }}
                - name: {{ .Name }}
                  mountPath: {{ .MountPath }}
                  subPath: {{ .SubPath }}
              {{- end }}
              {{- end }}
              {{- if .Meta.HasConfigMap }}
                - mountPath: /workload/mounted
                  name: workload-mount
              {{- end }}
                - mountPath: /dev/shm
                  name: dshm
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
          volumes:
          {{- if .Scheduling.Storage }}
            - name: {{ .Meta.Name }}-main
              ephemeral:
                volumeClaimTemplate:
                  spec:
                    accessModes: [ "ReadWriteMany" ]
                    storageClassName: {{ .Scheduling.Storage.StorageClassName }}
                    resources:
                      requests:
                        storage: 10Mi
          {{- else }}
            - name: {{ .Meta.Name }}-main
              emptyDir:
                medium: Memory
                sizeLimit: 10Mi
          {{- end }}
          {{- if .Meta.SecretVolumes }}
          {{- range .Meta.SecretVolumes }}
            - name: {{ .Name }}
              secret:
                secretName: {{ .SecretName }}
                items:
                  - key: {{ .Key }}
                    path: {{ .SubPath }}
          {{- end }}
          {{- end }}
          {{- if .Meta.HasConfigMap }}
            - name: workload-mount
              configMap:
                name: {{ .Meta.Name }}
          {{- end }}
            - name: dshm
              emptyDir:
                medium: Memory
                sizeLimit: 200Gi
    workerGroupSpecs:
      - replicas: {{ .Scheduling.CalculatedNumReplicas }}
        minReplicas: {{ .Scheduling.CalculatedNumReplicas }}
        maxReplicas: {{ mul .Scheduling.CalculatedNumReplicas 4 }}
        groupName: gpu-group
        rayStartParams: {}
        template:
          spec:
            securityContext:
              runAsUser: 1000
              runAsGroup: 1000
              fsGroup: 1000
            {{- if .Meta.ImagePullSecret }}
            imagePullSecrets:
            - name: {{ .Meta.ImagePullSecret }}
            {{- end }}
            containers:
              - name: llm
                image: {{ .Meta.Image }}
                imagePullPolicy: Always
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "ray stop"]
                env:
                  - name: HF_HOME
                    value: /workload/.cache/huggingface
                {{- if .Meta.EnvVars }}
                {{- range .Meta.EnvVars }}
                {{- if .Value }}
                  - name: {{ .Name }}
                    value: "{{ .Value }}"
                {{- else }}
                  - name: {{ .Name }}
                    valueFrom:
                      secretKeyRef:
                        name: {{ .ValueFrom.SecretKeyRef.Name }}
                        key: {{ .ValueFrom.SecretKeyRef.Key }}
                {{- end }}
                {{- end }}
                {{- end }}
                resources:
                    limits:
                        cpu: "{{ mul .Scheduling.CalculatedGPUsPerReplica 4 }}"
                        memory: "{{ mul .Scheduling.CalculatedGPUsPerReplica 32 }}Gi"
                        amd.com/gpu: "{{ .Scheduling.CalculatedGPUsPerReplica }}"
                    requests:
                        cpu: "{{ mul .Scheduling.CalculatedGPUsPerReplica 4 }}"
                        memory: "{{ mul .Scheduling.CalculatedGPUsPerReplica 32 }}Gi"
                        amd.com/gpu: "{{ .Scheduling.CalculatedGPUsPerReplica }}"
                volumeMounts:
                  - mountPath: /workload
                    name: {{ .Meta.Name }}-main
                {{- if .Meta.SecretVolumes }}
                {{- range .SecretVolumes }}
                  - name: {{ .Name }}
                    mountPath: {{ .MountPath }}
                    subPath: {{ .SubPath }}
                {{- end }}
                {{- end }}
                {{- if .Meta.HasConfigMap }}
                  - mountPath: /workload/mounted
                    name: workload-mount
                {{- end }}
                  - mountPath: /dev/shm
                    name: dshm
            volumes:
            {{- if .Scheduling.Storage }}
              - name: {{ .Meta.Name }}-main
                ephemeral:
                  volumeClaimTemplate:
                    spec:
                      accessModes: [ "ReadWriteMany" ]
                      storageClassName: {{ .Scheduling.Storage.StorageClassName }}
                      resources:
                        requests:
                          storage: {{ .Scheduling.Storage.Quantity }}
            {{- else }}
              - name: {{ .Meta.Name }}-main
                emptyDir:
                  medium: Memory
                  sizeLimit: 10Mi
            {{- end }}
            {{- if .Meta.SecretVolumes }}
            {{- range .Meta.SecretVolumes }}
              - name: {{ .Name }}
                secret:
                  secretName: {{ .SecretName }}
                  items:
                    - key: {{ .Key }}
                      path: {{ .SubPath }}
            {{- end }}
            {{- end }}
            {{- if .Meta.HasConfigMap }}
              - name: workload-mount
                configMap:
                  name: {{ .Meta.Name }}
            {{- end }}
              - name: dshm
                emptyDir:
                  medium: Memory
                  sizeLimit: 200Gi
