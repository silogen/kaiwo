apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Meta.Name }}
  namespace: {{ .Meta.Namespace }}
  labels:
    kaiwo-cli/username: {{ .Meta.User }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Meta.Name }}
  template:
    metadata:
      labels:
        app: {{ .Meta.Name }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Always
      {{- if .Meta.ImagePullSecret }}
      imagePullSecrets:
      - name: {{ .Meta.ImagePullSecret }}
      {{- end }}
      containers:
      - name: {{ .Meta.Name }}
        image: {{ .Meta.Image }}
        imagePullPolicy: Always
        {{- if .Workload.Entrypoint }}
        command: 
        - sh
        - -c
        - {{ .Workload.Entrypoint }}
        {{- end }}
        env:
          - name: HF_HOME
            value: /workload/.cache/huggingface
        {{- if .Meta.EnvVars }}
        {{- range .Meta.EnvVars }}
        {{- if .Value }}
          - name: {{ .Name }}
            value: "{{ .Value }}"
        {{- else }}
          - name: {{ .Name }}
            valueFrom:
              secretKeyRef:
                name: {{ .ValueFrom.SecretKeyRef.Name }}
                key: {{ .ValueFrom.SecretKeyRef.Key }}
        {{- end }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            memory: "{{ max (mul .Scheduling.TotalRequestedGPUs 32) 4 }}Gi"
            cpu: "{{ max (mul .Scheduling.TotalRequestedGPUs 4) 1 }}"
            {{ if .Scheduling.TotalRequestedGPUs }}
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
            {{ end }}
          limits:
            memory: "{{ max (mul .Scheduling.TotalRequestedGPUs 32) 4 }}Gi"
            cpu: "{{ max (mul .Scheduling.TotalRequestedGPUs 4) 1 }}"
            {{ if .Scheduling.TotalRequestedGPUs }}
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
            {{ end }}
        volumeMounts:
          - mountPath: /workload
            name: {{ .Meta.Name }}-main
        {{- if .Meta.SecretVolumes }}
        {{- range .Meta.SecretVolumes }}
          - name: {{ .Name }}
            mountPath: {{ .MountPath }}
            subPath: {{ .SubPath }}
        {{- end }}
        {{- end }}
        {{- if .Meta.HasConfigMap }}
          - mountPath: /workload/mounted
            name: workload-mount
        {{- end }}
          - mountPath: /dev/shm
            name: dshm
      volumes:
      {{- if .Scheduling.Storage }}
        - name: {{ .Meta.Name }}-main
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: {{ .Scheduling.Storage.StorageClassName }}
                resources:
                  requests:
                    storage: {{ .Scheduling.Storage.Quantity }}
      {{- else }}
        - name: {{ .Meta.Name }}-main
          emptyDir:
            medium: Memory
            sizeLimit: 10Mi
      {{- end }}
      {{- if .Meta.SecretVolumes }}
      {{- range .Meta.SecretVolumes }}
        - name: {{ .Name }}
          secret:
            secretName: {{ .SecretName }}
            items:
              - key: {{ .Key }}
                path: {{ .SubPath }}
      {{- end }}
      {{- end }}
      {{- if .Meta.HasConfigMap }}
        - name: workload-mount
          configMap:
            name: {{ .Meta.Name }}
      {{- end }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 200Gi
