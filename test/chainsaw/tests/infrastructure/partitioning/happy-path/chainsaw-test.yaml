apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: partitioning-happy-path
spec:
  parallel: false
  steps:
  - name: discover-gpu-node
    try:
    - script:
        content: kubectl get nodes -l 'amd.com/gpu' -o jsonpath="{.items[0].metadata.name}"
        outputs:
        - name: gpu_node
          value: ($stdout)

  - name: partition-to-cpx
    try:
    - apply:
        file: partitioning-plan-cpx.yaml
    - wait:
        apiVersion: infrastructure.silogen.ai/v1alpha1
        kind: NodePartitioning
        name: plan-happy-($gpu_node)
        timeout: 2m
        for:
          jsonPath:
            path: .spec.profile.dcmProfileName
            value: cpx
    - patch:
        resource:
          apiVersion: v1
          kind: Node
          metadata:
            name: ($gpu_node)
            labels:
              dcm.amd.com/gpu-config-profile: cpx
    - patch:
        resource:
          apiVersion: infrastructure.silogen.ai/v1alpha1
          kind: NodePartitioning
          metadata:
            name: plan-happy-($gpu_node)
          status:
            phase: Succeeded
            currentHash: patched-cpx

  - name: verify-cpx-completion
    try:
    - wait:
        apiVersion: infrastructure.silogen.ai/v1alpha1
        kind: PartitioningPlan
        name: plan-happy
        timeout: 2m
        for:
          condition:
            name: PlanReady
            value: "True"
    - wait:
        apiVersion: infrastructure.silogen.ai/v1alpha1
        kind: PartitioningPlan
        name: plan-happy
        timeout: 2m
        for:
          jsonPath:
            path: .status.phase
            value: Completed
    - assert:
        resource:
          apiVersion: infrastructure.silogen.ai/v1alpha1
          kind: NodePartitioning
          metadata:
            name: plan-happy-($gpu_node)
          spec:
            profile:
              dcmProfileName: cpx
          status:
            phase: Succeeded
            currentHash: patched-cpx
    - assert:
        resource:
          apiVersion: v1
          kind: Node
          metadata:
            name: ($gpu_node)
            labels:
              dcm.amd.com/gpu-config-profile: cpx

  - name: revert-to-spx
    try:
    - apply:
        file: partitioning-plan-spx.yaml
    - wait:
        apiVersion: infrastructure.silogen.ai/v1alpha1
        kind: NodePartitioning
        name: plan-happy-($gpu_node)
        timeout: 2m
        for:
          jsonPath:
            path: .spec.profile.dcmProfileName
            value: spx
    - patch:
        resource:
          apiVersion: v1
          kind: Node
          metadata:
            name: ($gpu_node)
            labels:
              dcm.amd.com/gpu-config-profile: spx
    - patch:
        resource:
          apiVersion: infrastructure.silogen.ai/v1alpha1
          kind: NodePartitioning
          metadata:
            name: plan-happy-($gpu_node)
          status:
            phase: Succeeded
            currentHash: patched-spx

  - name: verify-spx-completion
    try:
    - wait:
        apiVersion: infrastructure.silogen.ai/v1alpha1
        kind: PartitioningPlan
        name: plan-happy
        timeout: 2m
        for:
          jsonPath:
            path: .status.phase
            value: Completed
    - assert:
        resource:
          apiVersion: infrastructure.silogen.ai/v1alpha1
          kind: NodePartitioning
          metadata:
            name: plan-happy-($gpu_node)
          spec:
            profile:
              dcmProfileName: spx
          status:
            phase: Succeeded
            currentHash: patched-spx
    - assert:
        resource:
          apiVersion: v1
          kind: Node
          metadata:
            name: ($gpu_node)
            labels:
              dcm.amd.com/gpu-config-profile: spx
    catch:
    - command:
        entrypoint: kaiwo-dev
        env:
        - name: PRINT_LEVEL
          value: ($values.print_level)
        args: ["debug", "chainsaw", "--print-level=$PRINT_LEVEL"]
