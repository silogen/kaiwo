apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: kserve-inferenceservice-integration
spec:
  description: Test full InferenceService creation and readiness
  timeouts:
    assert: 120s
  steps:
  - name: Ensure template is available
    try:
      - assert:
          timeout: 5s
          file: ../../_shared/template-available.yaml

  - name: Create AIMService
    try:
    - apply:
        file: service.yaml

  - name: Verify InferenceService is created with correct spec
    try:
    - assert:
        timeout: 30s
        resource:
          apiVersion: serving.kserve.io/v1beta1
          kind: InferenceService
          metadata:
            name: test-service
            (ownerReferences[?kind == 'AIMService']):
            - name: test-service
          spec:
            predictor:
              (minReplicas == `1`): true
              (containers[0].image == 'ghcr.io/silogen/aim:0.4.0-meta-llama-llama-3.1-8b-instruct-v20251006'): true

  - name: Verify AIMService reports RuntimeReady
    try:
    - assert:
        timeout: 60s
        resource:
          apiVersion: aim.silogen.ai/v1alpha1
          kind: AIMService
          metadata:
            name: test-service
          status:
            status: Running
            (conditions[?type == 'RuntimeReady']):
            - status: "True"
              reason: RuntimeReady

  - name: Verify InferenceService becomes Ready
    try:
    - assert:
        timeout: 90s
        resource:
          apiVersion: serving.kserve.io/v1beta1
          kind: InferenceService
          metadata:
            name: test-service
          status:
            (conditions[?type == 'Ready']):
            - status: "True"

  - name: Verify HTTPRoute is created and ready
    try:
    - assert:
        timeout: 30s
        resource:
          apiVersion: gateway.networking.k8s.io/v1
          kind: HTTPRoute
          metadata:
            name: test-service
            (ownerReferences[?kind == 'AIMService']):
            - name: test-service
          (status.parents[0].conditions[?type == 'Accepted']):
          - status: "True"

  - name: Test HTTP endpoint through gateway
    try:
    - script:
        timeout: 60s
        content: |
          #!/bin/bash
          set -e

          # Get the gateway service
          GATEWAY_SVC="kserve-ingress-gateway.kgateway-system.svc.cluster.local"

          # Get the resolved path from AIMService status
          ROUTE_PATH=$(kubectl get aimservice test-service -o jsonpath='{.status.routing.path}')
          echo "Testing endpoint: ${ROUTE_PATH}/v1/models"

          # Port-forward to the gateway service in the background
          kubectl port-forward -n kgateway-system svc/kserve-ingress-gateway 8080:80 &
          PF_PID=$!

          # Wait for port-forward to be ready
          sleep 3

          # Cleanup function
          cleanup() {
            kill $PF_PID 2>/dev/null || true
          }
          trap cleanup EXIT

          # Curl the endpoint through the gateway
          RESPONSE=$(curl -s -w "\n%{http_code}" "http://localhost:8080${ROUTE_PATH}/v1/models" -H "Host: ${GATEWAY_SVC}")

          # Extract status code (last line)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          # Extract body (all lines except last)
          BODY=$(echo "$RESPONSE" | head -n -1)

          echo "HTTP Response Code: $HTTP_CODE"
          echo "Response Body: $BODY"

          # Verify response code is 200
          if [ "$HTTP_CODE" != "200" ]; then
            echo "ERROR: Expected HTTP 200, got $HTTP_CODE"
            exit 1
          fi

          # Verify response is valid JSON
          if ! echo "$BODY" | jq . > /dev/null 2>&1; then
            echo "ERROR: Response is not valid JSON"
            exit 1
          fi

          echo "SUCCESS: Service is accessible and returns valid JSON"
